建议1：警惕 Unicode 乱码
	Unicode把一对字符视为一个单一的字符，而javascript认为一对字符是两个不同的字符，这将会带来很多的问题，考虑到代码的安全性，我们应该尽量使用基本字符进行编码。

建议2：正确辨析javascript句法中的词、句和段
	句法定义了语言的逻辑和结构，包括词、句和段的语法特性，其中段体现逻辑的结构，句表达可执行的命令，词演绎逻辑的精髓。
	段落使用完整的结构封装独立的逻辑。下面这些结构都可以形成独立的段落。
	
	{
		//对象
	}
	
	function (){
		//函数
	}
	
	if (){
		//条件
	}
	
	for (){
		//循环
	}
	
	while (){
		//循环
	}
	
	switch (){
		//多条件
	}
	
	with (){
		//作用域
	}
	
	try (){
		//异常处理
	}
	
	段落结构包含的内容可以是一条或多条语句。可以在段落起始标记'{'前面添加修饰词，如域谓词'with,catch'、逻辑谓词'if,while,for,switch等'、函数谓词'function fn(arg)'等。
	语句是由多个词构成的完整逻辑。在javascript中，常用分号';'来划分语句，有时也可以省略分号，默认使用换行符表示完整的语句。
	一条语句可以包含一个或多个词。例如，在下面两条语句中，第一条语句只有一个词，这是一个指令词，该指令只能位于循环体或switch结构体内。第二条语句包含3个词，alert表示函数名(即变量)，小括号表示运算符，而'提示信息'表示字符串直接量。
	break;
	alert('提示信息')
	
	一条语句也可以包含一个或多个段落。例如，在下面这条语句中，直接把一个函数当作一个变量进行调用。
	(function(i){
		alert(i);
	})('提示信息');
	还可以把函数包含在一个闭包中形成多个结构嵌套，这个嵌套结构体就构成了一个复杂的语句，例如：
	(function(i){
		return function(){
			alert(i)
		};
	})('提示信息')();
	语句一般至少包含一个词或段落，但是语句也可以什么都不包含，仅有一个分号进行标识，这样的句子称为空语句。空语句常用做占位符。例如，在下面这个循环体内就包含了一个空语句。
	for(var i; i<100;i++){
		;
	}
	词语是javascript句法结构中的最小语义单位，包括指令(或称语句)、变量、直接量(或常量)、运算符等。在javascript中，词语之间必须使用分隔符进行分隔，否则javascript就会错误解析。下面的代码是一个简单的求两个数平均值的方法。
	var a = 34;
	var b = 98;
	function aver(c,d){
		return (c+d)/2;
	}
	alert(aver(a,b));
	其中var、function、return是指令，这些指令也是javascript默认的关键字；a、b、c、d、aver、alert为变量；34、98是数值直接量；=、(、)、{、}、/、+、，是运算符。
	
建议3：减少全局变量污染
	定义全局变量的3种方式：
	var f = 'value';
	window.f = 'value';
	f = 'value';
	
	为方便初学者在使用前无须声明变量而故意设计了隐式的全局变量，然而不幸的是忘记声明变量成了一个非常普遍的现象。javascript的策略是让那些被忘记预先声明的变量成为全局变量，这导致在程序中查找Bug变得非常困难。
	javascript语言最为糟糕的就是他对全局变量的依赖性。全局变量就是在所有作用域中都可见的变量。全局变量在很小的程序中可能会带来方便。但随着程序越来越大，它很快变得难以处理。因为一个全局变量可以被程序的任何部分在任意时间改变，使得程序的行为被极大地复杂化。在程序中使用全局变量降低了程序的可靠性。
	全局变量使在同一个程序中运行独立的子程序变得更难。如果某些全局变量的名称与子程序中的变量名称相同，那么他们将会相互冲突并可能导致程序无法运行，而且通常还使程序难以调试。
	实际上，这些全局变量削弱了程序的灵活性，应该避免使用全局变量。努力减少使用全局变量的方法:在应用程序中创建唯一一个全局变量，并定义该变量为当前应用的容器。
	var My = {};
	My.name = {
		"first-name":"first",
		"last-name":"last"
	};
	My.work = {
		number:123,
		one:{
			name:"accounting",
			time:"2014-9-14 12:55",
			city:"quanzhou"
		},
		two:{
			name:"programmer",
			time:"2015-9-14 12:55",
			city:"guangzhou"
		}
	};
	只要把多个全局变量都追加在一个名称空间下，将显著降低与其他应用程序产生冲突的概率，应用程序也会变得更容易阅读，因为My.work指向的是顶层结构。当然也可以使用闭包体将信息隐藏，它是另一种有效减少“全局污染”的方法。
	在编程语言中，作用域控制着变量与参数的可见性及生命周期。这为程序开发提供了一个重要的帮助，因为它减少了名称冲突，并且提供了自动内存管理。
	var foo = function(){
		var a = 1,b = 2;
		var bar = function(){
			var b = 3 ,c = 4;
			a += b + c;
		}
		bar();
	}foo(); //a = 1 + 3 + 4 = 8
	大多数采用C语言语法的语言都拥有块级作用域。对于一个代码块，即包括在一对大括号中的语句，其中定义的所有变量在代码块的外部是不可见的。定义在代码块中的变量在代码块执行结束后会被释放掉。但是，对于Javascript语言来说，虽然该语言支持代码块的语法形式，但是它并不支持块级作用域。
	javascript支持函数作用域，定义在函数中的参数和变量在函数外部是不可见的，并且在一个函数中的任何位置定义的变量在该函数中的任何地方都可见。
	其他主流编程语言都推荐尽可能迟地声明变量，但是在javascript中就不能够这样，因为它缺少块级作用域，最好的做法是在函数体的顶部声明函数中可能用到的所有变量。
	
建议4：注意javascript数据类型的特殊性

	1.防止浮点数溢出
	二进制的浮点数不能正确地处理十进制的小数，因此0.1+0.2不等于0.3
	num = 0.1 + 0.2;  //0.30000000000000004	
	这是javascript中最经常报告的bug，并且这是遵循二进制浮点数算数标准(IEEE 754)而导致的结果。这个标准适合很多应用，但它违背了数字基本常识。幸运的是，浮点数中的整数运算是精确的，所以小数表现出来的问题可以通过指定精度来避免。例如，针对上面的相加可以这样进行处理：
	a = (1+2)/10;     //0.3
	这种处理经常在货币计算中用到，在计算货币时当然期望得到精确的结果。例如，元可以通过乘以100而全部转成分，然后就可以精确地将每项相加，求和后的结果可以除以100转换回元。
	
	2.慎用javascript类型自动转换
	在javascript中能够自动转换变量的数据类型，这种转换是一种隐性行为。在自动转换数据类型时，javascript一般遵循：如果某个类型的值被用于需要其他类型的值的环境中，javascript就自动将这个值转换成所需要的类型。具体说明见表1.1
	
	表1.1 数据类型自动转换
	值(value)				字符串操作环境		数字运算环境			逻辑运算环境		对象操作环境
	undefined				"undefined"			NaN					false			Error
	null					"null"				0					false			Error
	非空字符串				不转换				字符串对应的数字值	
	NaN						true				String
	空字符串					不转换				0 					false 			String
	0 						"0"					不转换				false			Number
	NaN						"NaN"				不转换				false			Number
	Infinity				"Infinity"			不转换				true			Number
	Number.POSITIVE_INFINITY"Infinity"			不转换				true			Number
	Number.NEGATIVE_INFINITY"-Infinity"			不转换				true			Number
	Number.MAX_VALUE		"1.7976931348623157e+308"	不转换		true			Number
	Number.MIN_VALUE		"5e-324"			不转换				true			Number
	其他所有数字				"数字的字符串值"		不转换				true			Number
	true 					"true"				1					不转换			Boolean
	false					"false"				0					不转换			Boolean
	对象						toString()			valueOf()或NaN      true				不转换
												或 toString()						
												
	如果把非空对象用在逻辑运算环境中，则对象被转换为true。此时的对象包括所有类型的对象，即使是值为false的包装对象也被转换为true。
	如果把对象用在数值运算环境中，则对象会被自动转换为数字，如果转换失败，则返回值为NaN。
	当数组被用在数值运算环境中时，数组将根据包含的元素来决定转换的值。如果数组为空数组，则被转换为数值0.如果数组仅包含一个数字元素，则被转换为该数字的数值。如果数组包含多个元素，或者仅包含一个非数字元素，则返回NaN。
	当对象用于字符串环境中时，javascript能够调用toString()方法把对象转换为字符串在进行相关计算。当对象与数值进行加号运算时，则会尝试将对象转换为数值，然后参与求和运算。如果不能够将对象转换为有效数值，则执行字符串连接操作。
	
	3.正确检测数据类型
	使用typeof运算符返回一个用于识别其运算数类型的字符串。对于任何变量来说，使用typeof运算符总是以字符串的形式返回以下的6种类型之一：
	"number"											
	"string"
	"boolean"
	"object"
	"function"
	"undefined"
	不幸的是，在使用typeof检测null值时，返回的是"object",而不是"null".更好的检测null的方式其实很简单。下面定义一个检测值类型的一般方法：
	function type(o){
		return (o === null) ? "null" : (typeof o);
	}
	这样就可以避开因为null值影响基本数据的类型检测。注意：typeof 不能够检测复杂的数据类型，以及各种特殊用途的对象，如正则表达式对象、日期对象、数学对象等。
	对于对象或数组，可以使用constructor 属性，该属性值引用的是原来构造该对象的函数。如果结合typeof运算符和constructor 属性，基本能够完成数据类型的检测。表1.2所示列举了不同类型数据的检测结果。
	
	表1.2 数据类型检测
	值(value)				typeof a(表达式返回值)       a.constructor(构造函数的属性值)
	var a = 1				"number"						Number
	var a = "a"				"string"						String
	var a = true			"boolean"						Boolean
	var a = {}				"object"						Object
	var a = new Object()	"object"						Object
	var a = []				"object"						Array
	var a =  new Array()	"object"						Array
	var a = function(){}	"function"						Function
	function abs(){}		"object"						abs
	
	使用constructor 属性可以判断绝大部分数据的类型。但是，对于undefined和null特殊值，就不能使用constructor属性，因为使用javascript解释器会抛出异常。此时可以先把值转换为布尔值，如果为true,则说明不是undefined 和 null值，然后再调用constructor属性，例如：
	var  value = undefined;
	console.log(typeof value)                     	//"undefined"
	console.log(value && value.constructor)			//"undefined"
	var value = null;												
	console.log(typeof value)						//"object"				
	console.log(value && value.constructor)			//null
	对于数值直接量，也不能使用constructor属性，需要加上一个小括号，这是因为小括号运算符能够把数值转换为对象，例如：
	alert((10).constructor)
	使用toString()方法检测对象类型是最安全的，最准确的。调用toString()方法把对象转换为字符串，然后通过检测字符串中是否包含数组所特有的标志字符可以确定对象的类型。toString()方法返回的字符串形式如下：
	[object class]
	其中，object表示对象的通用类型，class表示对象的内部类型，内部类型的名称与该对象的构造函数名对应。例如，Array对象的class为"Array",Function对象的class为"Function",Date对象的class为"Date"，内部Math对象的class为"Math",所有的Error对象(包括各种Error子类的实例)的class为'Error'.
	客户端javascript的对象和由javascript实现定义的其他所有对象都具有预定义的特定class值，如"Window"、"Document" 和 "Form" 等。用户自定义对象的class值为"Object".
	class值提供的信息与对象的constructor属性值相似，但是class值是以字符串的形式提供这些信息的，而不是以构造函数的形式提供这些信息的，所以在特定的环境中是非常有用的。如果使用typeof运算符来检测，则所有对象的class值都为"Object"或"Function"，所以此时的class值不能够提供这些有效信息。
	但是，要获取对象的class值的唯一方法是必须调用Object对象定义的默认toString()方法，因为不同对象都会预定义自己的toString()方法，所以不能直接调用对象的toString()方法。例如，下面对象的toString()方法返回的就是当前UTC时间字符串，而不是字符串'[object Date]'.
	var d = new Date();
	console.log(d.toString());  //当前UTC时间字符串
	要调用Object对象定义的默认toString()方法，可以先调用Object.prototype.toString对象的默认toString()函数，再调用该函数的apply()方法在想要检测的对象上执行。结合上面的对象d,具体实现代码如下：
	
	//下面是一个比较完整的数据类型安全检测方法
	
	//安全检测javascript基本数据类型和内置对象
	//参数:o表示检测的值
	//返回值:返回字符串"undefined"、"number"、"boolean"、"string"、"function"、"regexp"、"array"、
	//"date"、"error"、"object"、"null"
		
		function typeOf(o){
			var _toString = Object.prototype.toString;
			//获取对象的toString()方法引用
			//列举基本数据类型和内置对象类型，可以进一步补充该数组的检测数据类型范围
			var _type = {
				"undefined":"undefined",
				"number":"number",
				"boolean":"boolean",
				"string":"string",
				"[object Function]":"fucntion",
				"[object RegExp]":"regexp",
				"[object Array]":"array",
				"[object Date]":"date",
				"[object Error]":"error"
			}
			return _type[typeof o] || _type[_toString.call(o)] || (o ? "object":"null");
		}
		
		var b = Math.abs;
		console.log(typeOf(b)) 		//"function"	
	
	上述方法适用于javascript基本数据类型和内置对象，而对于自定义对象是无效的。这是因为自定义对象被转换为字符串后，返回的值是没有规律的，并且不同浏览器的返回值也是不同的。因此，要检测非内置对象，只能够使用constructor属性和instaceof运算符来实现。
	4.避免误用parseInt
	parseInt是一个将字符串转换为整数的函数，与parseFloat(将字符串转换为浮点数)对应，这两种函数是javascript提供的两种静态函数，用于把非数字的原始值转换为数字。
	在开始转换时，parseInt会先查看位置0处的字符，不如该位置不是有效数字，则将返回NaN，不再深入分析。如果位置0处的字符是数字，则将查看位置1处的字符，并重复前面的测试，依此类推，知道发现非数字字符为止，此时parseInt()函数将把前面分析合法的数字字符转换为数值并返回。
	parseInt("123abc"); 		//123
	parseInt("1.73");			//1
	parseInt(".123");			//NaN
	浮点数中的点号对于parseInt来说属于非法字符，因此它不会被转换并返回，这样，在使用parseInt时，就存在潜在的误用风险。例如，我们并不希望parseInt("16")与parseInt("16 tons")产生相同的结果。如果该函数能够提醒我们出现额外文本就很好了，但它不会那么做。
	对于以0为开头的数字字符串，parseInt()函数会把它作为八进制数字处理，先把它转换为数值，然后再转换为十进制的数字返回。对于以0x开头的数字字符串，parseInt()函数则会把它作为十六进制数字处理，先把它转换为数值，然后再转换为十进制的数字返回。例如：
	var d = "010"; 		//八进制
	var e = "0x10";		//十六进制
	parseInt(d);		//8
	parseInt(e);		//16
	如果字符串的第一个字符时0，那么该字符串将基于八进制而不是十进制来求值。在八进制中，8和9不是数字，所以parseInt("08")和parseInt("09")的结果为0，这个错误导致了在程序解析日期和时间经常会出现问题。幸运的是，parseInt可以接受一个基数作为参数，这样parseInt("08",10)结果为8.因此，建议读者在使用parseInt时，一定要提供这个基数参数。
	通过在parseInt中提供技术参数，可以把二进制、八进制、十六进制等不同进制的数字字符串转换为整数。例如，下面把十六进制数字字符串"123abc"转换为十进制整数。
	parseInt("123abc",16) //1194684 (12*1+11*16+10*16^2+3^16^3+2*16^4+1*16^5=1194684)
	再如，把二进制、八进制和十进制数字字符串转换为整数：
	parseInt("10",2);		//把二进制数字10转换为十进制整数为2
	parseInt("10",8);		//把八进制数字10转换为十进制整数为8
	parseInt("10",10);		//把十进制数字10转换为十进制整数为10
	
建议5：防止javascript自动插入分号
	javascript语言有一个机制：在解析时，能够在一句话后面自动插入一个分号，用来修改语句末尾遗漏的分号分隔符。然而，由于这个自动插入的分号与javascript语言的另一个机制发生了冲突，即所有空格符都被忽略，因此程序可以利用空格格式化代码。
	这两种机制的冲突，很容易掩盖更为严重的解析错误。有时会不合时宜地插入分号。例如，在return语句中自动插入分号将会导致这样的后果：如果return语句要返回一个值，这个值的表达式的开始部分必须和return在同一行上，例如：
	var f = function(){
		return
		{
			status：true
		};
	}
	看起来这里要返回一个包含status成员元素的对象。不幸的是，javascript自动插入分号让它返回了undefined，从而导致下面真正要返回的对象被忽略。
	当自动插入分号导致程序被误解时，并不会有任何警告提醒。如果把{放在上一行尾部，而不是另开一行，就可以避免这样问题。例如：
	var f = function(){
		return{
			status：true
		};
	}
	为了避免省略分号引起的错误，建议养成好的习惯，不管一行内语句是否完整，只要是完整的语句都必须增加分号以表示句子结束。
	为了方便阅读，当长句子需要分号显示时，在分行时应确保一行内不能形成完整的逻辑语义。例如，下面代码时一条连续赋值的语句，通过分行显示可以更清楚地查看它们的关系。这种分行显示，由于一行内不能形成独立的逻辑语义，因此javascript不会把每一行视为独立的句子，从而不会产生歧义。
	var a = 
		b = 
		c = 4;
	以上语句在一行内显示如下：
	var a = b = c = 4;
	对于下面这条语句，如果不能正确分行显示，就很容易产生分歧。该语句的含义：定义一个变量i，然后为其赋值，如果变量a为true,则赋值为1，否则就判断变量b,如果b为true，则赋值为2，否则就判断变量c，如果c为true,则赋值为3，否则赋值为4。
	var i = a ? 1 : b ? 2 : c ? 3 : 4;
	下面的分行显示就是错误的，因为表达式a?1:b能够形成独立的逻辑语义，所以javascript会自动在其后添加分号来表示一个独立的句子。
	var i = a ? 1 : b
			? 2 : c
			? 3 : 4;
	安全的方法应该采用如下的分行显示，这样每一行就不会形成独立的语义。
	var i = a ? 1 
			: b ? 2
			: c ？ 3
			： 4;
	总之，在编写代码时，应养成使用分号结束句子的良好习惯，凡是完整的句子就应该使用分号进行分隔。分行显示的句子应该确保单行不容易形成独立的合法的逻辑语义。
	
建议6：正确处理javascript特殊值
	1.正确使用NaN 和 Infinity
	NaN时IEEE 754中定义的一个特殊的数量值。他不表示一个数字，尽管下面的表达式返回的是true.
	typeof NaN === "number"  //true
	该值可能会在试图将非数字形式的字符串转换为数字时产生，例如：
	+ "0" 		// 0
	+ "oops" 	//NaN
	如果NaN是数学运算中的一个运算数，那么它与其他运算数的运算结果就会是NaN.如果有一个表达式产生出NaN的结果，那么至少其中一个运算数是NaN，或者在某个地方产生了NaN。
	可以对NaN进行检测，但是typeof 不能辨别数字和NaN的区别，并且NaN不等同于它自己，所以，下面的代码结果令人惊讶。
	NaN === NaN 		//false
	NaN ！== NaN 		//true
	为了方便检测NaN值，javascript提供isNaN静态函数，以辨别数字与NaN区别。
	isNaN(NaN)			//true
	isNaN(0)			//false
	isNaN('oops')		//true
	isNaN("0")			//false
	判断一个值是否可用做数字的最佳方法是使用isFinite函数，因为它会筛除掉NaN和Infinity.Infinity表示无穷大。当数值超过浮点数所能够表示的范围时，就要用Infinity表示。反之，负无穷大为 -Infinity.
	使用isFinite函数能够检测NaN、正负无穷大。如果是有限数值，或者可以转换为有限数值，那么将返回true.如果只是NaN、正负无穷大的数值，则返回false.
	不幸的是，isFinite会试图把它的运算数转换为一个数字。因此，如果值不是一个数字，使用isFinite函数就不是一个有效的检测方法，这时不妨自定义isNumber函数。
	var isNumber = function (value){
		return typeof value === "number" && isFinite(value);
	}
	
	2.正确使用 null 和 undefined
	javascript有5种基本类型：String、Number、Boolean、Null和 Undefined.前3种都比较好理解，后面两种就稍微复杂点。Null类型只有一个值，就是null;Undefined类型也只有一个值，即undefined。null和undefined都可以作为字面量在javascript代码种直接使用。
	null与对象引用有关系，表示为空或不存在的对象引用。当声明一个变量却没有向它赋值的时候，它的值就是undefined.undefined的值会在如下情况中出现：
	从一个对象中获取某个属性，如果该对象及其prototype链中的对象都没有该属性，该属性的值为undefined.
	一个函数如果没有显示通过return语句将返回的值返回给其调用者，其返回值就是undefined，但在使用new调用函数时例如。
	javascript的函数可以声明任意多个形参，当该函数实际被调用时，传入的参数的个数如果小于声明的形式参数的个数，那么多余的形式参数的值为undefined.
	如果对值为null的变量使用typeof检测，得到的结果是"object",而typeof undefined的值为"undefined"。null == undefined, null !== undefined.
	与null不同，undefined 不是javascript的保留字，在ECMAScript v3标准中才定义undefined 为全局变量，初始值为undefined.因此，在使用undefined值时就存在一个兼容问题(早期浏览器可能不支持undefined).除了直接赋值和使用typeof运算符外，其他任何运算符对 undefined的操作都会引发异常。不过，可以声明undefined变量，然后查看它的值，如果它的值为undefined，则说明浏览器支持undefined值。例如：
	var undefined;
	conosole.log(undefined);
	如果浏览器不支持undefined关键字，可以自定义undefined变量，并将其赋值为undefined。
	例如：
		var undefined = void null;
		声明变量为undefined,将其初始化为表达式void null的值，由于运算符void在执行其后的表达式时会忽略表达式的结果值，而总是返回值undefined，因此利用这种方法可以定义一个变量为undefined,并将其赋值为undefined。既然时将变量undefined 赋值为 undefined，还有以下方式：
		var undefined = void 1;
		或者使用没有返回值的函数：
		var undefined = function(){}();
		alert(undefined); //"undefined"
		可以使用typeof运算符来检测某个变量的值是否为undefined:
		var a;
		if(typeof a == "undefined"){
		
		}
		
		3.使用假值
		javascript的类型系统时非常混乱的，类型特性不明显，而且交叉错乱。javascript语法系统拥有一大组假值，如下所示。这些值的布尔值都是false.
		0               	//Number
		NaN					//N
		''					//String
		false				//Boolean
		null				//Object
		undefined			//Undefined
		
		这些值全部都等同于false,但它们是不可互换的。例如，下面用法是错误的。
		value = myObject[name];
		if(value == null){
		}
		这是在用一种错误的方式去确定一个对象是否缺少一个成员属性。undefined是缺失的成员属性值，而上面代码片段用null来测试，使用了会强制类型转换的==运算符，而不是更可靠的===运算符。
		value = myObject[name];
		if(!value){
		}
		undefined和NaN并不是常见，他们是全局变量，还可以改变他们的值，虽然在程序设计中不应该采取这种做法，但可以改变他们的值。
		

建议7：小心保留字的误用
	表1.3 javascript 语言中定义的保留字
	
	首字母			保留字
	a				abstract
	b				boolean、break、byte
	c				case、catch、char、class、const、continue
	d				debugger、default、delete、do、double
	e				else、enum、export、extends
	f				false、final、finally、float、for、function
	g				goto
	i				if、implements、import、in、instanceof、int、interface
	l				long
	n				native、new、null
	p				package、private、protected、public
	r				return
	s				short、static、super、switch、synchronized
	t				this、throw、throws、transient、true、try、typeof
	v				var、volatile、void
	w				while、with
	
	这些单词中的大多数并没有在语言中使用，但是根据javascript语法规则，这些单词是不能用来命名变量或参数的。当保留字作为对象字面量的键值时，必须用引号括起来。保留字不能用在点语法中，所以有时必须使用中括号表示法。例如，下面的用法是合法的。
	var method;
	object = {box: value};
	object = {'case': value};
	object.box = valuel;
	object['case'] = value;
	但是，下面的用法就是非法的。
	var class;
	object = {case: value};
	object.case = value;
	各个浏览器对保留字的使用限制不同。例如，下面代码在Firefox中是合法的，而在其他浏览器中就是不合法的。
	object = {case: value};
	此外，不同的保留字也各不相同。例如，下面代码在Firefox和Opera 9.5中是合法的，但在IE和Safari中是不合法的。
	object = {class: value};
	对于int、long、float等保留字，他们在各浏览器中都可以用做变量名及对象字面量的键值。尽管如此，在这些场合依然不建议使用任何保留字。
	
建议8：谨慎使用运算符

	1.用===，而不用==
	javascript有两组相等运算符：=== 和 !==、 ==和!=、===和!==这一组运算符会按照期望的方式工作。如果两个运算数类型一致且拥有相同的值，那么===返回true,而!==返回false。==和!= 只有在两个运算数类型一致时才会做出正确的判断，如果两个运算数是不同的类型，会试图强制转换运算数的类型。转换的规则复杂且难以记忆，具体规则如下：
	'' == '0' 				//false
	0 == ''					//true
	0 == '0'				//true
	false == 'false'		//false
	false == '0'			//true
	false == undefined		//false
	false == null			//false
	null == undefined		//true
	
	上面的表达式如果全部使用 === 运算符，则都会返回false.
	== 和 != 运算符缺乏传递性，需要引起警惕。所谓传递性就是：如果 a==b 为true,b==c 为true,则a==c 也为true.所以，在javascript开发中，建议永远不要使用==和!=，而选用===和!==运算符。
	下面分别介绍===和==运算符的算法。
	(1) === 运算符的算法
	在使用 === 来判断两个值是否相等时，如判断 x===y,会先比较两个值的类型是否相同，如果不相同，直接返回false.如果两个值的类型相同，则接着根据x的类型展开不同的判断逻辑：
	如果x的类型是Undefined或Null,则返回false.
	如果x的类型是Number,只要x或y中有一个值为NaN，就返回false;如果x和y的数字值相等，就返回true;如果x或y中有一个是+0,另一个是-0，则返回true.
	如果x的类型是String,当x和y的字符序列完全相同时返回true,否则返回false.
	如果x的类型时Boolean,当x和y同为true或false时返回true,否则返回false.
	当x和y引用相同的对象时返回true,否则返回false.
	(2) == 运算符的算法
	在使用 == 来判断两个值是否相等时，如判断x==y，如果x和y的类型一样，判断逻辑与 === 一样；如果x和y的类型不一样，==不是见到那地返回false,而是会进行一定的类型转换。
	如果x和y中有一个的类型是null,另外一个类型是undefined,则返回true.如 null == undefined
	如果x和y中有一个的类型是String,另外一个类型是Number,会将String类型的值转换成Number来比较，如 3 == '3'
	如果x和y中有一个的类型是Boolean.会将Boolean类型的值转换成Number来比较，如true ==1、ture == '1'。
	如果x和y中有一个的类型是String或Number,另外一个类型是Object,会将Object类型的值转换成基本类型来比较，如[3,4] == '3,4'.
	
	2.谨慎使用++和--
	递增(++) 和 递减(--)运算符使程序员可以用非常简洁的风格去编码，如在C语言中，他们使得通过一行代码实现字符串的复制成为可能，例如：
	for(p = src,q = dest; !*p; p++, q++) *q = *p;
	事实上，这两个运算符容易形成一种不谨慎的编程风格。大多数的缓冲区溢出错误所造成的安全漏洞都是由于这种编码导致的。
	当使用++和--时，代码往往变得过于紧密、复杂和隐晦。因此，在javascript程序设计中不建议使用他们，从而使代码风格变得更为整洁。
	++和--运算符只能够作用于变量、数组元素或对象属性。下面的用法是错误的。
	4++;
	正确的用法如下：
	var i = 4;
	i++;
	++ 和 -- 运算符的位置不同所得运算结果也不同。例如，下面的递增运算符是先执行赋值运算，然后再执行递加运算。
	var n = 4;
	n++;  		//4
	++n;		//6
	
	3.小心逗号运算符
	逗号在javascript语言中表示连续运算，并返回最后运算的结果。例如，在下面这个示例中，javascript先运算第一个数值直接量，再运算第二个数值直接量，然后运算第三个数值直接量，最后运算第四个数值直接量，并返回最后一个运算值4.
	var a = (1,2,3,4);
	console.log(a)			//4
	再如：
	a = 1, b = 2, c = 3;
	等价于：
	a = 1;
	b = 2;
	c = 3;
	作为运算符，逗号一般用在特殊环境中，即在只允许出现一个句子的地方，把几个不同的表达式句子合并成一个长句。在javascript实际开发中，逗号运算符常与for循环语句联合使用。例如，下面这个简单的for循环结构中，通过连续的运算符在参数表达式中运算多个表达式，以实现传递或运算多个变量或表达式。
	for(var a = 10, b = 0; a > b;a++,b+=2){
		console.log("a = " + a + " b = " + b )
		}
		
		a = 10 b = 0
	  	a = 11 b = 2
		a = 12 b = 4
		a = 13 b = 6
		a = 14 b = 8
		a = 15 b = 10
		a = 16 b = 12
		a = 17 b = 14
		a = 18 b = 16
		a = 19 b = 18
	逗号运算符比较'怪异'，稍不留心就会出错。例如，在下面的这个简单的实例中，变量a的返回值为1，而不是连续运算后的返回值4.
	a = 1,2,3,4;
	console.log(a); 	//1
	第一个数值1先赋值给变量a，然后a再参与连续运算，整个句子的返回值为4，而变量a的返回值为1，代码演示如下：
	console.log((a = 1,2,3,4));			//4
	console.log(a= (1,2,3,4));			//4
	要确保变量a的值为连续运算，可以使用小括号逻辑分隔强迫4个数值先进行连续运算，然后再赋值。
	a = (1,2,3,4);
	console.log(a); 	//4
	当使用 var 关键字来定义变量时，会发现a最终没有返回值。
	var a = 1,2,3,4;
	console.log(a); //null 报错
	要确保var声明的变量正确返回连续运算的值，需要使用小括号先强怕数值进行计算，最后再把连续运算的值赋值给变量a.
	
	var a = (1,2,3,4);
	console.log(a) 		//4
	
	4.警惕运算符的副作用
	javascript运算符一般不会对运算数本身产生影响，如算术运算符、比较运算符、条件运算符、取逆、位于...,例如，a = b + c,其中的运算数b 和 c不会因为加法运算而导致自身的值发生变化。
	但是在javascript中还有一些运算符能够改变运算数自身的值，如赋值、递增、递减运算等。由于这类运算符自身的值会发生变化，在使用时具有一定的副作用，特别是在复杂表达式中，这种副作用更加明显，因此在使用时应该时刻保持警惕。例如，在下面代码中，变量a经过赋值运算和递加运算后，其值发生了两次变化。
	var a;
	a = 0;
	a++;
	再如
	var a = 1;
	a = (a++)+(++a)-(a++)-(++a);
	console.log(a) 		//-4  (a = 1 + 3 - 3 - 5 = -4);
	
建议9：不要信任hasOwnProperty
	hasOwnProperty方法常被用做一个过滤器，用来消除for in语句在枚举对象属性时的弊端。考虑到hasOwnProperty时一个方法，而不是一个运算符，因此，在任何对象中，它可能会被一个不同的函数甚至一个非函数的值的所替换。
	例如，在下面代码中，obj对象的hasOwnProperty成员被清空了，此时如果再利用这个方法来过滤出obj对象的本地属性就会失败。
	var obj = {},name;
	obj.hasOwnProperty = null;
	for(name in obj){
		if(obj.hasOwnProperty(name)){
			document.writeIn(name+":"+obj[name]);
		}
	}		
	
	
建议10：谨记对象非空特性
	javascript从来没有真正的空对象，因为每个对象都可以从原型链中取得成员，这种机制会带来很多麻烦。例如，在编写统计一段文本中每个单词的出现次数的代码时可以这样设计：先使用toLowerCase方法统一转换文本为小写格式，接着使用split方法以一个正则表达式为参数生成一个单词数组，然后可以遍历该数组中每个单词，并统计每个单词出现的次数。
	var i,word;
	var text = "A number of W3C staff will be on hand to discuss HTML5,CSS，and other thchnologies of the Open Web Platform.";
	var words = text.toLowerCase().split(/[\s,.]+/);
	var count = {};
	for(i = 0;i<words.length;i++){
		word = words[i];
		if(count[word]){
			count[word] += 1;
		}else{
		count[word] = 1;
		}
	}	
	在执行结果中，count["on"]的值为1，count["of"]的值是3，而count.constructor却包含着一个看上令人不可思议的字符串。在主流浏览器上，count.constructor将会返回字符串；function Object(){[native code]}.其原因是count对象继承字Object.prototype.而Object.prototype包含一个名为constructor的成员对象。count.constructor的值是一个Object.+=运算符，就像+运算符一样，如果它的运算数不是数字时会执行字符串连接的操作而不是加法运算。因为count对象是一个函数，所以+=运算符将其转换成一个莫名其妙的字符串，然后再把一个数字1加在他的后面。
	采用与处理for in中问题相同的方法来避免类似的问题，用hasOwnProperty方法检测成员关系，或者检查特定的类型。在当前情形下，可以编写如下过滤条件：
	if(typeof count[word] === "number"){
	}
		
建议11:慎重使用伪数组		
	javascript没有真正的数组，因此typeof运算符不能辨别数组和对象。伪数组在javascript中有很高的易用性，程序员不用给它设置维度，而且永远不用担心产生越界错误，但javascript数组的性能相比真正的数组可能更糟糕。要判断一个值是否为数组，必须使用constructor属性，例如：
	if(varlue && typeof value === 'object' && value.constructor === Array){
	}	
	arguments不是一个数组，它是一个带有length成员属性的对象，很多时候会把它理解为一个伪数组。商用上面的检测方法会将arguments识别为一个数组，有时候这是希望得到的结果，尽管arguments不包含任何数组的方法。
	
建议12: 避免使用with
	with 语句的语法如下
	with (Expression)
		Statement
	with会把由Expression计算出来的对象添加到当前执行上下文的作用域链的前面，然后使用这个扩大的作用域链来执行语句Statement，最后恢复作用域链。不管其中的语句是否正常退出，作用域链都会被恢复。
	由于with会把额外的对象添加到作用域链的前面，因此食用with可能会影响性能，并造成难以发现的错误。由于额外的对象在作用域链的前面，当执行到with语句，需要对标识符求值时，会先沿着该对象的prototype链查找。如果找不到，才会一次查找作用域链中原来的对象。因此，如果在with语句中频繁引用不在额外对象的prototype链中的变量，查找的速度回避不使用with慢，例如：
	function A(){
		this.a = "A";
	}
	function B(){
		this.b = "B";
	}
	B.prototype = new A();
	function C(){
		this.c = "C";
	}		
	C.prototype = new B();
	(function(){
		var str = "javascript is the best language";
		alert(typeof a);			//undefined
		var a = 1;
		var obj = new C();
		with(obj){
			alert(typeof a);		//string
			alert(str);
		}
		alert(typeof a);		//number
	})();
	使用with语句可以快捷地访问对象的属性，然而，得到的结果有时可能时不可预料的，所以应该避免使用它。with语句在javascript语言中存在，本身就严重影响了javascript处理器的的速度，因此它阻止了变量名的词法作用域绑定。它的本意是好的，但如果没有它，javascript语言可能会更好。
	
建议13:养成优化表达式的思维方式
	对同一个表达式稍加改动就会打乱表达式的逻辑运算顺序，因此我们应该学会优化表达式的结构，不改变表达式的运算顺序和结果即可提高代码的可读性。
	
	1.第一种方式——加小括号
	例如，面对下面这个复杂表达式，可能被&& 和 || 的优先级所迷惑。
	(a + b > c && a - b < c || a > b > c)
	不过，如果进行如下优化，逻辑运算的顺序就会非常清晰了。
	((a + b > c) && ((a - b < c) || ( a > b > c)))
	虽然增加这些小括号显得多余，但是这么写并没有影响表达式的实际运算，反而带来了非常明显的好处。学会使用小括号分隔符来分隔表达式的逻辑层次，不失为一种高明之举。
	使用小括号分隔符来优化表达式内部的逻辑层次，是一种很好的设计习惯。如果复杂表达式中存在一些与人的思维方式相悖的不良的逻辑结构，也会影响人们对代码的阅读和思考，这个时候就应该根据人的思维习惯来优化表达式的逻辑结构。
	
	2.第二种方式——改变表达式结构顺序
	例如，想设计一个表达式来筛选学龄人群，即年龄大于或等于6岁且小于18岁的人：
	if(age >= 6 && age < 18){
	}
	直观阅读，表达式age>=6&& age<18可以很容易被每一个所理解。继续复杂化表达式：筛选所有弱势年龄人群，以便在购票时实施半价优惠，即年龄大于或等于6岁且小于18岁，或者年龄大于或等于65岁的人：
	if(age >= 6 && age < 18 || age >= 65){
	}
	从逻辑上分析，上面表达式没有错误。但是从结构上分析就感觉比较模糊，为此我们可以使用小括号来分隔逻辑结构层次，以方便阅读。
	if((age >= 6 && age < 18) ||(age >= 65)){
	}
	但是，此时如果根据人的思维来思考条件表达式的逻辑顺序时，会发现它有些紊乱，与人的一般思维方式发生了错位。人的思维是一种线性的、有联系、有参照的一种方式。
	对于表达式(age >= 6 && age < 18) || age >= 65 来说，其表达式的逻辑是非线性的，呈现多线思维的交叉型，这种思维结构对于机器计算来说基本上没有任何影响。但是对于人脑思维来说，就需要认真思考之后，才能把这个表达式中各个小的表达式逻辑单元串联在一起，形成一个完整的逻辑线。
	直观分析，这个逻辑结构的错乱是因为随意混用大于号和小于号等运算符造成的。如果调整一下表达式的结构顺序，阅读一起就非常清晰了。
	if((6<= age && age < 18) || 65 <= age){
	}
	这里采用统一的小于号方式，即所有参与比较的项都按着从左到右、从小到大的思维顺序进行排列，而不再遵循变量始终居左、比较值始终居右的传统编写习惯。（个人还是习惯传统，没办法改了 - -）
	
	3.第三种方式——避免布尔表达式的叠加
	表达式中的另一个"顽疾"是布尔型表达式的重叠所产生的迷宫。在复杂表达式中，这种多重叠加的布尔表达式足以"令人生畏"。例如，对下面这个条件表达式：
	if !(!isA || !isB){
	}
	如果采用"剥洋葱皮"的方法逐层分析，也可以找到结果。当然，也可以对这样的表达式进行优化，以方便阅读。例如：
	( ! isA || ! isB ) = ! ( isA && isB )
	( ! isA && ! isB ) = ! ( isA || isB )
	？运算符为很多程序员所喜爱，特别是在javascript函数式编程中，这个运算符的使用频率会更高。但对于很多开发者来说，由于难以适应这种连续思维，会在阅读代码时产生障碍。为此，可以适当采用if条件语句对？运算符表达式进行分解。
	
	4.第四种方式——if 语句分解
	例如，对于下面这个复杂表达式，如果不仔细进行分析，很难理清它的逻辑顺序。
	var a.b = new c(a.d ? a.e(1) : a.f(1))
	在使用if条件语句后，逻辑结构就变得非常清晰了。
	if(a.d){
		var a.b = new c(a.e(1));
	}else{
		var a.b = new c(a.f(0));		
	}						
	
建议14：不要滥用eval
	eval是一个被滥用得很严重的javascript特性。eval函数传递一个字符串给javascript编译器，该字符串会被当成一段javascript程序来解析和执行。
	很多开发者对JavaScript语言一知半解，却喜欢使用eval.例如，如果只知道点表示法，却不知道下标表示法，就会按如下方法编写代码：
	eval("value = obj."+ key + ";");
	而不是按如下方法编写：
	value = obj[key];
	使用eval形式的代码会更加难以阅读。这种形式将使代码性能显著降低，因为eval必须运行编译器，同时这种形式减弱了Web应用的安全性，因为它向被求值的文本授予了太多的权限。使用eval与使用with语句一样，降低了语言的性能。
	除了显式调用eval外，JavaScript还支持隐式调用eval。Function构造器是eval的另一种形式，所以也应该避免使用它。当传递的是字符串参数时，setTimeout 和 setInterval 函数(浏览器提供的函数，能接受字符串参数或函数参数)会像eval那样去处理，因此也应该避免使用字符串参数形式。例如，下面是使用函数参数形式进行的处理。
	var obj = {
		show1 : function(){
			alert("时间到!");
		},
		show2 : function(){
			alert("10 秒一次的提醒!";)
		};
	};
	setTimeout(obj.show1,1000);
	setTimeout("obj.show1();",2000);
	setInterval(obj.show2,10000);
	setInterval("obj.show2();",10000);
	在Ajax应用中，JSON是一种流行的浏览器端与服务器端之间的传输数据的格式。服务器端传过来的数据在浏览器端通过javascript的eval方法转换成可以直接使用的对象。然后，在浏览器端执行任意的JavaScript会带来潜在的安全风险，恶意的JavaScript代码可能会被破坏应用。对于这个问题，有两种解决方法：
	带注释的JSON (JSON conments filtering)
	带前缀的JSON (JSON prefixing)
	这两种方法都是在Dojo中用来避免JSON劫持(JSON hijacking)的方法。带注释的JSON指的是从服务器端返回的JSON数据都是带有注释的，浏览器端的JavaScript代码需要先去掉注释的标记，再通过eval来获得JSON数据。这种方法一度被广泛使用，后来被证明并不安全，还会引入其他的安全漏洞。带前缀的JSON是目前推荐使用的方法，这种方法的使用非常简单，只需要从服务器端返回的JSON字符串之前加上{}&&,再调用eval方法。关于这两种方法的细节，可参考https://www.ibm.com/developerworks/cn/web/wa-lo-dojoajax1/index.html中的内容。对JSON字符串进行语法检查，安全的JSON应该是不包含赋值和方法调用的。再JSON的RFC 4627中，给出了判断JSON字符串是否安全的方法，此方法通过两个正则表达式来实现。
	var my_JSON_object = !(/[^,:{}\[\]0-9.\-+Eaeflnr-u  \n\r\t]./.test(text.replace(/"(\\.|[^"\\])*"/g, ''))) && eval('(' + text +')');
	
	
建议15：避免使用continue
	continue语句与break语句用法相似，在循环结构中用于控制逻辑的执行方向。break语句用于停止循环，而continue语句却用于再次执行循环。与break语句语法相同，continue语句可以跟随一个标签名，用来指定继续执行的循环结构的起始位置。
	continue label;
	例如，在下面的这个实例中，当循环变量等于4时，会停止循环体内最后一句的执行，返回for语句起始位置继续执行下一次循环。
	for(var i = 0;i < 10;i++){
		alert(i);
		if(i == 4) continue;
		alert(i);
	}
	不管continue语句是否带有标签，都只能在循环结构(如while、do/while、for、for/in)体内使用，在其他地方都会引发编译错误。当执行continue语句时，会停止当前循环过程，开始执行下一次的循环。但对于不同的结构体，continue语句继续执行的位置会略有不同。
	在实践中，通过代码重构移除continue语句会使性能得到改善。因此，在非必要条件下，建议不要使用continue语句。
	

建议16：防止switch贯穿
	javascript语言中那些显而易见的危险或无用的特性不是最糟糕的，这些特性很容易被避免。最糟糕的特性像"带刺的玫瑰"，他们是有用的，但也是危险的。
	switch语句的由来可以追溯到FORTRAN IV 的go to语句。除非明确地中断流程，否则每次条件判断后都贯穿到下一个class条件。switch语句的基本语法格式如下：
	switch (expression){
		statements
	}
	完全扩展后的switch结构如下：
	switch (expression){
		case label:
			statementList
		case label:
			statementList
		...
		default:
			statementList		
	}		
	当执行switch语句时，JavaScript解释器首先计算expression表达式的值，然后使用这个值与每个case从句中label 标签值进行比较，如果相同则执行该标签下的语句。在执行时，如果遇到跳转语句，则会跳出switch结构，否则按顺序向下执行，知道switch语句末尾。如果没有匹配的标签，则会执行default从句中的语句。如果没有default从句，则跳出switch结构，执行其后的句子。从ECMAScript v3版本开始允许case从句中可以是任意的表达式，这在C/C++和java语言是不允许的。switch语句的示例如下:
	
	switch (a = 3) {
		case 3-2:
			alert(1);
			break;
		case 1+1：
			alert(2);
			break;	
		case b = 3:
			alert(3);
	}
	
	在switch语句中，case从句只是指明了想要执行代码的起点，并没有指明终点，如果没有相case从句中添加break语句，则会发生连续贯穿现象，从而忽略后面case从句，这样就会造成switch结构的逻辑混乱。不过，如果是在函数中使用switch语句，还可以使用return语句来代替break语句，这两个语句都可以终止switch语句，防止case从句之间发生逻辑贯穿。
	
建议17：块标志并非多余
	if、while、do或for语句可以接受一个括在大括号中的代码块，也可以接受单行语句。单行语句的形式是另一种"带刺的玫瑰"。它的好处是可以节省两个字节，但是它模糊了程序的结构，在随后的操作中可能产生问题，例如：
	if(0)
		if(1)
			alert(1);
	else
		alert(0);
		
	如果不借助代码版式，很难明白以上代码的逻辑结构。而JavaScript解释器会根据if关键字与eles关键字最近原则按如下结构进行解释。
	if(0){
		if(1){
			alert(1);
		}
	}else{
		alert(0);
	}				

	严格遵循规范，并始终使用代码块，会使代码更容易理解。
	
建议18：比较function语句和function表达式
	在javascript语言中，既有function语句，也有函数表达式，这是令人困惑的，因为他们看起来是相同的。一个function语句就是值为一个函数的var语句的简写形式。
	下面的语句：
	function f(){}
	相当于：
	var f = function(){}
	这里建议使用第二种形式，因为它能明确表示f是一个包含一个函数值的变量。要用好JavaScript这门语言，理解函数就是数值是很重要的。
	function语句在解析时会被提升，这意味这不管function被放置在哪里，他都会被移动到定义时所在作用域的顶层。这放宽了函数必须先声明后使用的要求，当然这也会造成混乱。
	在if语句中也是禁止使用function语句的。大多数的浏览器都允许在if语句中使用function语句，但他们在解析function语句的处理上各不相同，因此造成了可移植性方面的问题。
	根据官方的语法约定，一个语句不能够以一个函数表达式开头，而以单词function开头的语句是一个function语句。解决这个问题的方法就是把函数表达式括在一个圆括号之中。
	(function (){
		...
	})();
	
建议19：不要使用类型构造器
	在默认状态下，JavaScript预定义了很多构造函数，如Function()、Array()、Date()、String()等，如果去掉小括号，他们就是JavaScript内置对象。在JavaScript中，构造函数实际上就是类的一种抽象结构。
	利用 new 运算符调用构造函数，可以快速生成很多实例对象。例如：
	var f = new Function(p1,p2,...,pn,body);
	其中构造函数Function()的参数类型都是字符串，p1~pn表示所创建函数的参数名称列表，body表示所创建函数的函数结构体语句，在body语句之间通过分号进行分隔。可以完全省略所有参数，仅为构造函数传递一个字符串，用来表示函数的具体结构。f就是所创建函数的名称。例如：
	var f = new Function("a","b","return a+b");
	使用new Function()的形式来创建一个函数不是很常见，因为一个函数体通常会包括多条语句，如果将这些语句以一个字符串的形式作为参数来传递，代码的可读性会很差。类似的用法还有：
	new Boolean(false)
	new 运算符调用函数会返回一个对象，该对象有一个valueof方法，同时返回被包装的函数，其实这是完全没有必要的，并且有时还令人困惑。不要使用new Boolean、new Number()或new String().此外，应该避免使用new Object 和 new Array，可以使用{}和[]来代替。
	在其他语言中，构造函数一般没有返回值，他只是初始化由this关键字所指代的对象,并且什么都不返回。但是，JavaScript构造函数可以返回一个对象，返回的对象将成为new 运算符的运算值，此时this所引用的对象就会被覆盖。
	function F(){
		this.x = 1;
		return { y : 2};
	}
	var f = new F();
	f.y;			//2
	上面示例演示了如何使用返回的对象覆盖构造函数的实例对象，但是，如果返回值是原始值时，就不会覆盖实例化对象，此时按着普通函数的方式调用构造函数就可以得到返回值。例如：
	function F(){
		this.x = 1;
		return true;
	}
	var f = new F();
	f.x;		//1
	F();		//true
	因此，如果构造函数的返回值为对象，可以直接调用构造函数来引用该返回值对象，而不需要使用new 运算符来运算。
	
建议20：不要使用new
	通过new 运算符将创建一个继承于其运算数的原型的新对象，然后调用该运算数，把新创建的对象绑定给this。这给了运算数（它应该是一个构造函数）一个机会，在返回给请求者前去自定义新创建的对象。
	如果忘记使用new运算符，得到的就是一个普通的函数调用，并且this被绑定到全局对象，而不是新创建的对象。这意味着当函数尝试去初始化新成员时，它将会"污染"全局变量，这是一件非常糟糕的事情，既没有编译时警告，也没有运行时警告。	
	按照惯例，结合new运算符使用的函数应该被命名为首字母大写的形式，并且首字母大写的形式应该只是用来命名那些构造函数。这个约定提供了一个视觉线索，以帮助发现那些JavaScript语言自身经常忽略却需要付出昂贵代价的错误。一个更好的应对策略就是根本不使用new 运算符。
	
	
建议21：推荐提高循环性能的策略
	每次运行循环体时都会产生性能开销，增加总的运行时间，即使是循环体中最快的代码，累计迭代上千次，也将带来不小的负担。因此，减少循环的迭代次数可获得显著的性能提升。例如：
	var iterations = Math.floor(items.length / 8),startAt = items.length % 8,i = 0;
	do{
		switch(startAt){
			case 0：
				process(items[i++]);
			case 7：
				process(items[i++]);
			case 6：
				process(items[i++]);
			case 5：
				process(items[i++]);
			case 4：
				process(items[i++]);
			case 3：
				process(items[i++]);
			case 2：
				process(items[i++]);
			case 1：
				process(items[i++]);						
		}
		startAt = 0;
	} while (--iterations);
	在上面代码中，每次循环最多可调用process()函数8次。循环迭代次数为元素总数除以8。因为总数不一定是8的整数倍，所以startAt变量存放余数，指明第一次循环中应当执行多少次process()。如果现在有12个元素，那么第一次循环将调用process()4次，第二次循环调用8次，用2次循环代替了12次循环。在下面的代码中取消switch表达式，将余数处理与主循环分开。
	var i = items.length % 8;
	while(i){
		process(items[i--]);
	}
	i = Math.floor(items.length / 8);
	while(i){
		process(items[i--]);
		process(items[i--]);
		process(items[i--]);
		process(items[i--]);
		process(items[i--]);
		process(items[i--]);
		process(items[i--]);
		process(items[i--]);
	}
	虽然上面代码使用两个循环替代了先前的一个循环，但是在循环体中去掉了switch表达式，速度更快。如果循环的迭代次数少于1000次，减少迭代次数的循环与普通循环相比可能只有微不足道的性能提升。如果迭代次数超过1000次，比如在500 000次迭代中，合理地减少循环的迭代次数可以使运行时间减少到普通循环的70%。
	有两个因素影响到循环的性能：
	每次迭代干什么。
	迭代的次数。
	通过减少着两者中的一个或全部(的执行时间)，可以提高循环的整体性能。如果一次循环需要较长时间来执行，那么多次循环将需要更长时间。限制在循环体内耗时操作的数量是一个加快循环的好方法。一个典型的数组处理循环可采用3种循环的任何一种。最常用的代码如下：
	//方法1
	for(var i = 0;i < items.length;i++){
		process(items[i])
	}
	//方法2
	var j = 0;
	while (j < items.length){
		process(items[j++]);
	}
	//方法3
	var k = 0;
	do {
		process(items[k++]);
	}while (k < items.length);
	在每个循环中，每次运行循环体都要发生如下操作：
	第一步，在控制条中读一次属性(items.length)。
	第二步，在控制条中执行一次比较(i<items.length)。
	第三步，比较操作，观察条件控制的运算结果是不是true(i<items.length == true)。
	第四步，一次自加操作(i++)。
	第五步，一次数组查找(items[i])。
	第六步，一次函数调用(process[items[i]])。
	在这些简单的循环中，即使没有太多的代码，每次迭代都要进行这6步操作。代码运行速度很大程度上由process()对每个项目的操作所决定，即便如此，减少每次迭代中操作的总数也可以大幅度提高循环的整体性能。
	优化循环的第一步是减少对象成员和数组项查找的次数。在大多数浏览器上，这些操作比访问局部变量或直接量需要更长时间。例如，在上面代码中，每次循环都查找items.length,这是一种浪费，因为该值在循环体执行过程中不会改变，因此产生了不必要的性能损失。我们可以简单地将此值存入一个局部变量中，在控制条件中使用这个局部变量，从而提高了循环性能，例如：
	for(var i = 0, len = items.length;i<len;i++){
		process(items[i]);
	}
	var j = 0,count = items.length;
	while(j<count){
		process(items[j++]);
	}
	var k = 0, num = items.length;
	do{
		process(items[k++]);
	}while(k<num);
	这些重写后的循环只在循环执行之前对数组长度进行一次属性查询，使控制条件中只有局部变量参与运算，因此速度更快。根据数组的长度，在大多数浏览器上总循环时间可以节省大约25%，在IE浏览器中可节省50%。
	还可以通过改变循环的顺序来提高循环性能。通常，数组元素的处理顺序与任务无关，可以从最后一个开始，直接到处理完第一个元素。倒序循环可以略微提高循环性能，例如：
	for(var i = items.length;i--){
		process(items[i]);
	}
	var j = items.length;
	while (j--){
		process(items[j]);
	}
	var k = items.lenghth - 1;
	do{
		process(items[k]);
	} while (k--);
	在上面代码中使用倒序循环，并且在控制条件中使用了减少。每个控制条件只是简单地于零进行比较。控制条件与true值进行比较，任何非零数字自动强制转换为true,而零等同于false。实际上，控制条件已经从两次比较减少到一次比较。将每次迭代中两次比较减少到一次可以大幅度提高循环速度。通过倒序循环和最小化属性查询，可以看到执行速度比原始版本提升了50%~60%。
	与原始版本相比，每次迭代中只进行如下操作：
	第一步，在控制条件中进行一次比较(i == true)。
	第二步，一次减少操作(i--)。
	第三步，一次数组查询(items[i])。
	第四步，一次函数调用(process(items[i]))。
	新循环的每次迭代中减少两个操作。随着迭代次数的增长，性能将显著提升。
	
建议22：少用函数迭代
	ECMA-262v4 为本地数组对象新增加了一个forEach方法。此方法遍历一个数组的所有成员，并且在每个成员上执行一个函数。在每个元素上执行的函数作为forEach()的参数传进去，并在调用函数时接收3个参数：数组项的值、数组项d索引、数组自身。例如：
	items.forEach(function(value,index,array){
		process(value);
	});
	forEach在Firefox、Chrome和Safari等浏览器中为原生函数。另外，forEach在大多数Javascript库中都有等价实现，例如：
	//YUI 3
	Y.Array.each(items,function(value,index,array){
		process(value);
	});
	
	//jQuery
	jQuery.each(items,function(index,value){
		process(value);
	});
	
	//Dojo
	dojo.forEach(items,function(value,index,array){
		process(value);
	});
	
	//Prototype
	items.each(function(value,index){
		process(value);
	});
	尽管基于函数的迭代使用起来非常便利，但是比基于循环的迭代要慢一些。每个数组项要关联额外的函数调用事造成速度慢的主要原因。在所有情况下，基于函数的迭代占用时间是基于循环的迭代的8倍，因此在非特殊需求下，不建议使用函数迭代。
	
建议23：推荐提高条件性能的策略
	与循环相似，条件表达式决定javascript运行流的走向。与其他语言一样，JavaScript也采用if和switch两种条件结构。由于不同浏览器针对流程控制进行了不同的优化，因此两者在性能上并没有特别大的差异，主要还是根据需求形式进行分析和选择：条件数量较大，建议选择switch结构，而不是if结构，这样可以使代码更易读；如果条件比较少时，建议选择if结构。
	//条件少
	if(found){
		//执行代码
	}else{
		//执行代码
	}
	
	//条件多
	switch(color){
		case "red":
			//执行代码
			break;
		case "blue":
			//执行代码
			break;
		case "brown":
			//执行代码
			break;
		case "black":
			//执行代码
			break;
		default:
			//执行代码			
	}
	事实证明，在大多数情况下，switch比if运行更快，但是只有当条件体数量很大时才明显更快。switch与if的主要性能区别再于：当条件体增加时，if性能负担增加的程度比switch更大。因此，从性能方面考虑，如果条件体较少，应使用if：如果条件体较多，应使用switch。
	一般来说，if适用于判断两个离散的值或几个不同的值域。如果判断多于两个离散值，那么switch将时更理想的选择。
	
建议24：优化if逻辑
	逻辑顺序体现了人的思维的条理性和严密性。合理的顺序可以提升解决问题的品质，相反，混乱的顺序很容易导致各种错误的发生。在分支结构中经常需要面临各种优化逻辑顺序的问题。
	人在思考问题时，一般总会对各种最可能发生的情况做好准备，这叫做"有备而来"。分支结构中各种条件根据情况的先后、轻重来排定顺序。如果把最可能的条件放在前面，把最不可能的条件放在后面，这样程序在执行时总会按照代码先后顺序逐一检测所有条件，知道发现匹配的条件时才停止继续检测。如果把最可能的条件放在前面，就等于降低了程序的检测次数，自然也就提升了分支结构的执行效率，避免空转，这在大批量数据检测中效果非常明显。例如，对于一个论坛系统来说，普通会员的数量要远远大于版主和管理员的数量。换句话说，大部分登录的用户都是普通会员，如果把普通会员的检测放在分支结构的前面，就会减少计算机检测的次数。
	if优化目标：最小化找到正确分支之前所判断条件体的数量。if优化方法：将最常见的条件体放在首位。例如：
	if(value < 5){
		//do sth
	}else if(value > 5 && value < 10){
		//do sth
	}else{
		//do sth
	}
	这段代码只有在value值经常小于5时才是最优的。如果value经常大于或等于10，那么在进入正确分支之前，必须两次运算条件体，导致表达式的平均运行时间增加。if中的条件体应当总是按照从最大概率到最小概率的顺序排列，以保证理论运行速度最快。
	当然，在性能影响不是很大的情况下，遵循条件检测的自然顺序会更容易阅读。例如，对于检测周一到周五值日任务安排的分支结构来说，虽然周五的任务比较重要，但是这类人物有着明显的顺序，安排顺序结构还是遵循它的自然逻辑比较好。如果打乱条件的顺序，把周五的任务安排在前面，对于整个分支结构的执行性能没有太大的帮助，并且不方便阅读代码。考虑到这一点，按自然顺序来安排结构会更富可读性。
	应注意分支之间的顺序优化，当然在同一个条件的表达式内部也应该考虑逻辑顺序问题。
	
建议25：恰当选用if和switch
	switch结构中存在很多限制，存在这些限制的主要目的是提高多重分支结构的执行效率。因此，如果能够使用switch结构，就不要选择if结构。
	无论是使用if结构，还是使用switch结构，应该确保下面3个目标的基本实现：
	准确表达事物内在的、固有的逻辑关系。不能为了结构而破坏事物的逻辑关系。
	优化逻辑的执行效率。执行效率是程序设计的重要目标，不能为了省事而随意耗费资源。
	简化代码的结构层次，使代码更方便阅读。
	相对来说，下面几种情况更适合使用switch结构：
	枚举表达式的值。这种枚举是可以期望的、平行逻辑关系的。
	表达式的值具有离散性，不具有线性的非连续的区间值。
	表达式的值是固定的，不是动态变化的。
	表达式的值是有限的，而不是无限的，一般情况下表达式应该比较少。
	表达式的值一般为整数、字符串等类型的数据。
	而if结构则更适合下面的一些情况：
	具有复杂的逻辑关系。
	表达式的值具有线性特征，如对连续的区间值进行判断。
	表达式的值是动态的。
	测试任意类型的数据。
	例如，针对学生分数进行不同的判断，如果分数小于60，则评定为不及格；如果分数在60~75(不包含75)之间，则评定为合格；如果分数在75~85(不含85)之间，则评定为良好；如果分数在85~100之间，则评定为优秀。针对这种情况，表达式的值是连续的线性判断，显然使用if结构会更合适一些。
	if(score < 60){
		alert('不及格')；
	}else if(60 <= score < 75){
		alert('合格')；
	}else if(75 <= score < 85){
		alert('良好')；
	}else if(85 <= score <= 100){
		alert('优秀')；
	}	
	如果使用switch结构，则需要枚举100种可能，如果分数值还包括小数，情况就更加复杂了，此时使用switch结构就不是明智之举。但是，对于有限制的枚举数据，比如性别，使用switch结构会更高效，例如：
	switch(sex){
		case "女"：
			alert('女士');
			break;
		case "男"：
			alert('先生');
			break;
		default:
			alert('请选择性别');	
	}
	
	
	
	
	
	
