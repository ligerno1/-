建议1：警惕 Unicode 乱码
	Unicode把一对字符视为一个单一的字符，而javascript认为一对字符是两个不同的字符，这将会带来很多的问题，考虑到代码的安全性，我们应该尽量使用基本字符进行编码。

建议2：正确辨析javascript句法中的词、句和段
	句法定义了语言的逻辑和结构，包括词、句和段的语法特性，其中段体现逻辑的结构，句表达可执行的命令，词演绎逻辑的精髓。
	段落使用完整的结构封装独立的逻辑。下面这些结构都可以形成独立的段落。
	
	{
		//对象
	}
	
	function (){
		//函数
	}
	
	if (){
		//条件
	}
	
	for (){
		//循环
	}
	
	while (){
		//循环
	}
	
	switch (){
		//多条件
	}
	
	with (){
		//作用域
	}
	
	try (){
		//异常处理
	}
	
	段落结构包含的内容可以是一条或多条语句。可以在段落起始标记'{'前面添加修饰词，如域谓词'with,catch'、逻辑谓词'if,while,for,switch等'、函数谓词'function fn(arg)'等。
	语句是由多个词构成的完整逻辑。在javascript中，常用分号';'来划分语句，有时也可以省略分号，默认使用换行符表示完整的语句。
	一条语句可以包含一个或多个词。例如，在下面两条语句中，第一条语句只有一个词，这是一个指令词，该指令只能位于循环体或switch结构体内。第二条语句包含3个词，alert表示函数名(即变量)，小括号表示运算符，而'提示信息'表示字符串直接量。
	break;
	alert('提示信息')
	
	一条语句也可以包含一个或多个段落。例如，在下面这条语句中，直接把一个函数当作一个变量进行调用。
	(function(i){
		alert(i);
	})('提示信息');
	还可以把函数包含在一个闭包中形成多个结构嵌套，这个嵌套结构体就构成了一个复杂的语句，例如：
	(function(i){
		return function(){
			alert(i)
		};
	})('提示信息')();
	语句一般至少包含一个词或段落，但是语句也可以什么都不包含，仅有一个分号进行标识，这样的句子称为空语句。空语句常用做占位符。例如，在下面这个循环体内就包含了一个空语句。
	for(var i; i<100;i++){
		;
	}
	词语是javascript句法结构中的最小语义单位，包括指令(或称语句)、变量、直接量(或常量)、运算符等。在javascript中，词语之间必须使用分隔符进行分隔，否则javascript就会错误解析。下面的代码是一个简单的求两个数平均值的方法。
	var a = 34;
	var b = 98;
	function aver(c,d){
		return (c+d)/2;
	}
	alert(aver(a,b));
	其中var、function、return是指令，这些指令也是javascript默认的关键字；a、b、c、d、aver、alert为变量；34、98是数值直接量；=、(、)、{、}、/、+、，是运算符。
	
建议3：减少全局变量污染
	定义全局变量的3种方式：
	var f = 'value';
	window.f = 'value';
	f = 'value';
	
	为方便初学者在使用前无须声明变量而故意设计了隐式的全局变量，然而不幸的是忘记声明变量成了一个非常普遍的现象。javascript的策略是让那些被忘记预先声明的变量成为全局变量，这导致在程序中查找Bug变得非常困难。
	javascript语言最为糟糕的就是他对全局变量的依赖性。全局变量就是在所有作用域中都可见的变量。全局变量在很小的程序中可能会带来方便。但随着程序越来越大，它很快变得难以处理。因为一个全局变量可以被程序的任何部分在任意时间改变，使得程序的行为被极大地复杂化。在程序中使用全局变量降低了程序的可靠性。
	全局变量使在同一个程序中运行独立的子程序变得更难。如果某些全局变量的名称与子程序中的变量名称相同，那么他们将会相互冲突并可能导致程序无法运行，而且通常还使程序难以调试。
	实际上，这些全局变量削弱了程序的灵活性，应该避免使用全局变量。努力减少使用全局变量的方法:在应用程序中创建唯一一个全局变量，并定义该变量为当前应用的容器。
	var My
	
	
	
	
